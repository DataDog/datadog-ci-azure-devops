# Disable the pipeline for individual commits except on `main` merges.
# The pipeline requires a Pull Request to run.
trigger:
  - main

parameters:
  - name: performRelease
    displayName: Release Production Extension
    type: boolean
    default: false
  - name: releaseSemver
    displayName: Release Production semver
    type: string
    default: Patch
    values:
      - Patch
      - Minor
      - Major

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: ci-variables
  - name: artifactPath
    value: vsix
  - name: packagedTask
    value: datadog-ci.vsix
  - name: publisherId
    value: Datadog
  - name: extensionName
    value: 'Datadog CI'
  - name: extensionId
    value: datadog-ci
  - name: devExtensionTag
    value: -dev
  - name: syntheticsTaskId
    value: synthetics-application-testing

stages:
  # Build and package .vsix extension file
  - stage: Build
    jobs:
      - job: BuildAndPackage
        displayName: Build and package
        steps:
          - task: TfxInstaller@4
            displayName: Install TFX CLI
            inputs:
              version: 'v0.12.x'

          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: '16.15.0'

          - task: Bash@3
            displayName: Compile the Synthetics task
            inputs:
              targetType: 'inline'
              script: |
                cd SyntheticsRunTestsTask
                yarn install --immutable
                yarn build
                yarn workspaces focus --production
                rm -rf .yarn/

          - task: PackageAzureDevOpsExtension@4
            displayName: Package Datadog CI extension
            name: 'packageStep'
            inputs:
              rootFolder: '$(Build.SourcesDirectory)'
              outputPath: '$(Build.ArtifactStagingDirectory)/$(packagedTask)'
              updateTasksVersion: false
              extensionVisibility: 'private'
              extensionPricing: 'free'

          - publish: '$(packageStep.Extension.OutputPath)'
            displayName: Publish VSIX artifact
            artifact: $(artifactPath)

  # Release a DEV extension. E2E tests will automatically run on it in `e2e.azure-pipelines.yml`
  - stage: ReleaseDev
    displayName: Release DEV
    dependsOn: Build
    jobs:
      - job: PublishDev
        displayName: Publish DEV version
        steps:
          - download: current
            displayName: Download VSIX artifact
            artifact: $(artifactPath)

          - task: TfxInstaller@4
            displayName: Install TFX CLI
            inputs:
              version: 'v0.12.x'

          - task: QueryAzureDevOpsExtensionVersion@4
            displayName: Query existing DEV extension version
            name: 'queryDevVersion'
            inputs:
              connectTo: 'VsTeam'
              connectedServiceName: 'marketplace-service-connection'
              publisherId: '$(publisherId)'
              extensionId: '$(extensionId)'
              extensionTag: '$(devExtensionTag)'
              versionAction: 'Patch'

          - task: PublishAzureDevOpsExtension@4
            displayName: Publish new DEV extension version
            inputs:
              connectTo: 'VsTeam'
              connectedServiceName: 'marketplace-service-connection'
              fileType: 'vsix'
              vsixFile: '$(Pipeline.Workspace)/$(artifactPath)/$(packagedTask)'
              extensionTag: '$(devExtensionTag)'
              extensionName: '$(extensionName) DEV'
              extensionVisibility: 'private'
              extensionPricing: 'free'
              shareWith: 'datadog-ci'
              extensionVersion: '$(queryDevVersion.Extension.Version)'
              updateTasksId: true # The DEV task ID is overridden to 99cf84cd-0117-58b7-b1dd-d95e5ae9baf8 (based on the `extensionTag`)
              updateTasksVersion: true # Do not require updating the task version during development
              updateTasksVersionType: patch

      - job: Sleep
        dependsOn: PublishDev
        pool: server
        steps:
          - task: Delay@1
            displayName: Delay for x minutes
            inputs:
              delayForMinutes: 5

  # Extension public release, only performed on manual runs
  - ${{ if eq(parameters.performRelease, true) }}:
      - stage: Release
        dependsOn: Build
        jobs:
          - job: PublishPublic
            displayName: Publish (public)
            steps:
              - download: current
                displayName: Download VSIX
                artifact: $(artifactPath)

              - task: TfxInstaller@4
                displayName: Install TFX CLI
                inputs:
                  version: 'v0.12.x'

              - task: QueryAzureDevOpsExtensionVersion@4
                displayName: Query existing extension version
                name: 'queryVersion'
                inputs:
                  connectTo: 'VsTeam'
                  connectedServiceName: 'marketplace-service-connection'
                  publisherId: '$(publisherId)'
                  extensionId: '$(extensionId)'
                  versionAction: '${{ parameters.releaseSemver }}'
                  setBuildNumber: 'false'

              - task: PublishAzureDevOpsExtension@4
                displayName: Publish Extension
                inputs:
                  connectTo: 'VsTeam'
                  connectedServiceName: 'marketplace-service-connection'
                  fileType: 'vsix'
                  vsixFile: '$(Pipeline.Workspace)/$(artifactPath)/$(packagedTask)'
                  extensionVisibility: 'public'
                  extensionPricing: 'free'
                  extensionVersion: '$(queryVersion.Extension.Version)'
                  updateTasksId: false # The task ID stays 60b18503-c6d6-4e4b-a6b2-52fc6fb3d525 (defined in task.json)
                  updateTasksVersion: false # Bumped automatically by our Release Automation bot

              - task: GitHubRelease@1
                displayName: Create Github Release
                inputs:
                  gitHubConnection: 'github-service-connection-lefebvree'
                  repositoryName: '$(Build.Repository.Name)'
                  action: 'create'
                  target: '$(Build.SourceVersion)'
                  tagSource: 'userSpecifiedTag'
                  assets: '$(Pipeline.Workspace)/$(artifactPath)/$(packagedTask)'
                  tag: 'v$(queryVersion.Extension.Version)'
                  title: 'v$(queryVersion.Extension.Version)'
                  releaseNotesSource: 'inline'
                  changeLogCompareToRelease: 'lastFullRelease'
                  changeLogType: 'commitBased'
