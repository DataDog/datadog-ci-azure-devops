# Disable the pipeline for individual commits except on `main` merges.
# The pipeline requires a Pull Request to run.
trigger:
  - main

parameters:
  - name: performRelease
    displayName: Release Extension
    type: boolean
    default: false
  - name: releaseSemver
    displayName: Release semver
    type: string
    default: Patch
    values:
      - Patch
      - Minor
      - Major

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: ci-variables

stages:
  # Build and package .vsix extension file
  - stage: Build
    jobs:
      - job: Build
        steps:
          - task: TfxInstaller@3
            displayName: Install TFX CLI
            inputs:
              version: 'v0.12.x'
          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: '10.21.0'
          - task: Bash@3
            displayName: Compile the Synthetics task
            inputs:
              targetType: 'inline'
              script: |
                cd SyntheticsRunTestsTask
                yarn install --immutable
                yarn build
                yarn install --production --immutable
          - task: PackageAzureDevOpsExtension@3
            displayName: Package Datadog CI extension
            name: 'packageStep'
            inputs:
              rootFolder: '$(Build.SourcesDirectory)'
              outputPath: '$(Build.ArtifactStagingDirectory)/datadog-ci.vsix'
              updateTasksVersion: false
              extensionVisibility: 'private'
              extensionPricing: 'free'
          - publish: '$(packageStep.Extension.OutputPath)'
            displayName: Publish VSIX artifact
            artifact: $(ArtifactName)

  - ${{ if eq(parameters.performRelease, false) }}:
      - stage: Test
        displayName: E2E tests
        dependsOn: 'Build'
        jobs:
          - job: E2E
            displayName: Cross-platform
            strategy:
              matrix:
                Linux:
                  imageName: 'ubuntu-latest'
                Windows:
                  imageName: 'windows-latest'
            pool:
              vmImage: $(imageName)
            steps:
              - download: current
                displayName: Download VSIX artifact
                artifact: $(ArtifactName)
              # Extract the extension then run the task directly with node by providing
              # the inputs through environment variables
              - task: ExtractFiles@1
                displayName: Extract VSIX
                inputs:
                  archiveFilePatterns: '$(Pipeline.Workspace)/$(ArtifactName)/datadog-ci.vsix'
                  destinationFolder: 'extracted'
              - task: Bash@3
                displayName: Run the task
                inputs:
                  workingDirectory: 'extracted/SyntheticsRunTestsTask'
                  targetType: 'inline'
                  script: |
                    export INPUT_AUTHENTICATIONTYPE='apiAppKeys'
                    export INPUT_APIKEY='$(API_KEY)'
                    export INPUT_APPKEY='$(APP_KEY)'
                    export INPUT_CONFIGPATH='../../ci/e2e.config.json'
                    export INPUT_PUBLICIDS='2r9-q7u-4nn,pwd-mwg-3p5'
                    node task.js

  # Extension public release, only performed on manual runs
  - ${{ if eq(parameters.performRelease, true) }}:
      - stage: Release
        displayName: Release
        dependsOn: 'Build'
        jobs:
          - job: PublishPublic
            displayName: Publish (public)
            steps:
              - download: current
                displayName: Download VSIX
                artifact: $(ArtifactName)
              - task: TfxInstaller@3
                displayName: Install TFX CLI
                inputs:
                  version: 'v0.12.x'
              - task: QueryAzureDevOpsExtensionVersion@3
                displayName: Query existing extension version
                name: 'queryVersion'
                inputs:
                  connectTo: 'VsTeam'
                  connectedServiceName: 'marketplace-service-connection'
                  publisherId: 'Datadog'
                  extensionId: 'datadog-ci'
                  versionAction: '${{ parameters.releaseSemver }}'
                  setBuildNumber: 'false'
              - task: PublishAzureDevOpsExtension@3
                displayName: Publish Extension
                inputs:
                  connectTo: 'VsTeam'
                  connectedServiceName: 'marketplace-service-connection'
                  fileType: 'vsix'
                  vsixFile: '$(Pipeline.Workspace)/$(ArtifactName)/datadog-ci.vsix'
                  updateTasksVersion: false
                  extensionVisibility: 'private' # TODO: to change to public
                  extensionPricing: 'free'
                  extensionVersion: '$(queryVersion.Extension.Version)'
              - task: GitHubRelease@1
                displayName: Create Github Release
                inputs:
                  gitHubConnection: 'github-service-connection-lefebvree'
                  repositoryName: '$(Build.Repository.Name)'
                  action: 'create'
                  target: '$(Build.SourceVersion)'
                  tagSource: 'userSpecifiedTag'
                  assets: '$(Pipeline.Workspace)/$(ArtifactName)/datadog-ci.vsix'
                  tag: 'v$(queryVersion.Extension.Version)'
                  title: 'v$(queryVersion.Extension.Version)'
                  releaseNotesSource: 'inline'
                  changeLogCompareToRelease: 'lastFullRelease'
                  changeLogType: 'commitBased'
