# Disable the pipeline for individual commits except on `main` merges.
# The pipeline requires a Pull Request to run.
trigger:
  - main

parameters:
  - name: performRelease
    displayName: Release Extension
    type: boolean
    default: false
  - name: releaseSemver
    displayName: Release semver
    type: string
    default: Patch
    values:
      - Patch
      - Minor
      - Major

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: ci-variables
  - name: artifactPath
    value: vsix
  - name: packagedTask
    value: datadog-ci.vsix
  - name: publisherId
    value: Datadog
  - name: extensionName
    value: 'Datadog CI'
  - name: extensionId
    value: datadog-ci
  - name: devExtensionTag
    value: -dev
  - name: syntheticsTaskId
    value: synthetics-application-testing

stages:
  # Build and package .vsix extension file
  - stage: Build
    jobs:
      - job: Build
        steps:
          - task: TfxInstaller@3
            displayName: Install TFX CLI
            inputs:
              version: 'v0.12.x'

          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: '10.21.0'

          - task: Bash@3
            displayName: Compile the Synthetics task
            inputs:
              targetType: 'inline'
              script: |
                cd SyntheticsRunTestsTask
                yarn install --immutable
                yarn build
                yarn install --production --immutable

          - task: PackageAzureDevOpsExtension@3
            displayName: Package Datadog CI extension
            name: 'packageStep'
            inputs:
              rootFolder: '$(Build.SourcesDirectory)'
              outputPath: '$(Build.ArtifactStagingDirectory)/$(packagedTask)'
              updateTasksVersion: false
              extensionVisibility: 'private'
              extensionPricing: 'free'

          - publish: '$(packageStep.Extension.OutputPath)'
            displayName: Publish VSIX artifact
            artifact: $(artifactPath)

  - ${{ if eq(parameters.performRelease, false) }}:
      - stage: Test
        displayName: E2E tests
        dependsOn: 'Build'
        jobs:
          - job: PublishDev
            displayName: Publish DEV version
            steps:
              - download: current
                displayName: Download VSIX artifact
                artifact: $(artifactPath)

              - task: TfxInstaller@3
                displayName: Install TFX CLI
                inputs:
                  version: 'v0.12.x'

              - task: QueryAzureDevOpsExtensionVersion@3
                displayName: Query existing DEV extension version
                name: 'queryDevVersion'
                inputs:
                  connectTo: 'VsTeam'
                  connectedServiceName: 'marketplace-service-connection'
                  publisherId: '$(publisherId)'
                  extensionId: '$(extensionId)'
                  extensionTag: '$(devExtensionTag)'
                  versionAction: 'Patch'

              - task: PublishAzureDevOpsExtension@3
                displayName: Pubish new DEV extension version
                inputs:
                  connectTo: 'VsTeam'
                  connectedServiceName: 'marketplace-service-connection'
                  fileType: 'vsix'
                  vsixFile: '$(Pipeline.Workspace)/$(artifactPath)/$(packagedTask)'
                  extensionTag: '$(devExtensionTag)'
                  extensionName: '$(extensionName) DEV'
                  extensionVersion: '$(queryDevVersion.Extension.Version)'
                  updateTasksId: true
                  extensionVisibility: 'private'
                  extensionPricing: 'free'
                  shareWith: 'datadog-ci'

              - task: Bash@3
                displayName: Wait for DEV extension availibility
                inputs:
                  filePath: 'ci/poll-extension-availlibity.sh'
                  arguments: |
                    -s "$(SERVICE_URL)" \
                    -t "$(SERVICE_TOKEN)" \
                    -c "$(publisherId).$(extensionId)$(devExtensionTag).$(syntheticsTaskId)" \
                    -v "$(queryDevVersion.Extension.Version)"

              # - publish: 'NOTICE'
              #   displayName: Test artefact
              #   artifact: test

          # - job: E2E
          #   displayName: Cross-platform end-to-end testing
          #   dependsOn: PublishDev
          #   strategy:
          #     matrix:
          #       Linux:
          #         imageName: 'ubuntu-latest'
          #       Windows:
          #         imageName: 'windows-latest'
          #   pool:
          #     vmImage: $(imageName)
          #   steps:
          #     - task: Datadog.datadog-ci-dev.synthetics-application-testing.SyntheticsRunTests@0.0.13
          #       displayName: Run the DEV task
          #       inputs:
          #         authenticationType: 'apiAppKeys'
          #         apiKey: '$(API_KEY)'
          #         appKey: '$(APP_KEY)'
          #         publicIds: '2r9-q7u-4nn,pwd-mwg-3p5'
          #         configPath: 'ci/e2e.config.json'

  # Extension public release, only performed on manual runs
  - ${{ if eq(parameters.performRelease, true) }}:
      - stage: Release
        displayName: Release
        dependsOn: 'Build'
        jobs:
          - job: PublishPublic
            displayName: Publish (public)
            steps:
              - download: current
                displayName: Download VSIX
                artifact: $(artifactPath)

              - task: TfxInstaller@3
                displayName: Install TFX CLI
                inputs:
                  version: 'v0.12.x'

              - task: QueryAzureDevOpsExtensionVersion@3
                displayName: Query existing extension version
                name: 'queryVersion'
                inputs:
                  connectTo: 'VsTeam'
                  connectedServiceName: 'marketplace-service-connection'
                  publisherId: '$(publisher)'
                  extensionId: '$(extensionId)'
                  versionAction: '${{ parameters.releaseSemver }}'
                  setBuildNumber: 'false'

              - task: PublishAzureDevOpsExtension@3
                displayName: Publish Extension
                inputs:
                  connectTo: 'VsTeam'
                  connectedServiceName: 'marketplace-service-connection'
                  fileType: 'vsix'
                  vsixFile: '$(Pipeline.Workspace)/$(artifactPath)/$(packagedTask)'
                  updateTasksVersion: false
                  extensionVisibility: 'public'
                  extensionPricing: 'free'
                  extensionVersion: '$(queryVersion.Extension.Version)'

              - task: GitHubRelease@1
                displayName: Create Github Release
                inputs:
                  gitHubConnection: 'github-service-connection-lefebvree'
                  repositoryName: '$(Build.Repository.Name)'
                  action: 'create'
                  target: '$(Build.SourceVersion)'
                  tagSource: 'userSpecifiedTag'
                  assets: '$(Pipeline.Workspace)/$(artifactPath)/$(packagedTask)'
                  tag: 'v$(queryVersion.Extension.Version)'
                  title: 'v$(queryVersion.Extension.Version)'
                  releaseNotesSource: 'inline'
                  changeLogCompareToRelease: 'lastFullRelease'
                  changeLogType: 'commitBased'
