# Disable the pipeline for individual commits except on `main` merges.
# The pipeline requires a Pull Request to run.
trigger:
  - main

parameters:
  - name: performRelease
    displayName: Release Production Extension
    type: boolean
    default: 'False'
  - name: releaseSemver
    displayName: Release Production semver
    type: string
    default: Patch
    values:
      - Patch
      - Minor
      - Major
  - name: performDevRelease
    displayName: Release DEV Extension
    type: boolean
    default: 'True'

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: ci-variables
  - name: artifactPath
    value: vsix
  - name: packagedTask
    value: datadog-ci.vsix
  - name: publisherId
    value: Datadog
  - name: extensionName
    value: 'Datadog CI'
  - name: extensionId
    value: datadog-ci
  - name: devExtensionTag
    value: -dev
  - name: syntheticsTaskId
    value: synthetics-application-testing

stages:
  # Build and package .vsix extension file
  - stage: Build
    jobs:
      - job: Build
        steps:
          - task: TfxInstaller@4
            displayName: Install TFX CLI
            inputs:
              version: 'v0.12.x'

          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: '16.15.0'

          - task: Bash@3
            displayName: Compile the Synthetics task
            inputs:
              targetType: 'inline'
              script: |
                cd SyntheticsRunTestsTask
                yarn install --immutable
                yarn build
                yarn workspaces focus --production
                rm -rf .yarn/

          - task: PackageAzureDevOpsExtension@4
            displayName: Package Datadog CI extension
            name: 'packageStep'
            inputs:
              rootFolder: '$(Build.SourcesDirectory)'
              outputPath: '$(Build.ArtifactStagingDirectory)/$(packagedTask)'
              updateTasksVersion: false
              extensionVisibility: 'private'
              extensionPricing: 'free'

          - publish: '$(packageStep.Extension.OutputPath)'
            displayName: Publish VSIX artifact
            artifact: $(artifactPath)

  # TODO: remove this
  # - ${{ if and(eq(parameters.performRelease, false), eq(parameters.performDevRelease, false)) }}:
  #     - stage: Test
  #       displayName: E2E tests
  #       dependsOn: 'Build'
  #       jobs:
  #         - job: E2E
  #           displayName: Cross-platform
  #           strategy:
  #             matrix:
  #               Linux:
  #                 imageName: 'ubuntu-latest'
  #               Windows:
  #                 imageName: 'windows-latest'
  #           pool:
  #             vmImage: $(imageName)
  #           steps:
  #             - download: current
  #               displayName: Download VSIX artifact
  #               artifact: $(artifactPath)

  #             # Extract the extension then run the task directly with node by providing
  #             # the inputs through environment variables
  #             - task: ExtractFiles@1
  #               displayName: Extract VSIX
  #               inputs:
  #                 archiveFilePatterns: '$(Pipeline.Workspace)/$(artifactPath)/$(packagedTask)'
  #                 destinationFolder: 'extracted'

  #             - task: Bash@3
  #               displayName: Run the task
  #               inputs:
  #                 workingDirectory: 'extracted/SyntheticsRunTestsTask'
  #                 targetType: 'inline'
  #                 script: |
  #                   export INPUT_AUTHENTICATIONTYPE='apiAppKeys'
  #                   export INPUT_APIKEY='$(API_KEY)'
  #                   export INPUT_APPKEY='$(APP_KEY)'
  #                   export INPUT_CONFIGPATH='../../ci/e2e.config.json'
  #                   export INPUT_PUBLICIDS='2r9-q7u-4nn,pwd-mwg-3p5'
  #                   node task.js

  # Release DEV extension on `performDevRelease` or automatically on `main` push
  - ${{ if or(eq(parameters.performDevRelease, true), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}:
      - stage: ReleaseDev
        displayName: Release DEV
        dependsOn: 'Build'
        jobs:
          - job: PublishDev
            displayName: Publish DEV version
            steps:
              - download: current
                displayName: Download VSIX artifact
                artifact: $(artifactPath)

              - task: TfxInstaller@4
                displayName: Install TFX CLI
                inputs:
                  version: 'v0.12.x'

              - task: QueryAzureDevOpsExtensionVersion@4
                displayName: Query existing DEV extension version
                name: 'queryDevVersion'
                inputs:
                  connectTo: 'VsTeam'
                  connectedServiceName: 'marketplace-service-connection'
                  publisherId: '$(publisherId)'
                  extensionId: '$(extensionId)'
                  extensionTag: '$(devExtensionTag)'
                  versionAction: 'Patch'

              - task: PublishAzureDevOpsExtension@4
                displayName: Publish new DEV extension version
                inputs:
                  connectTo: 'VsTeam'
                  connectedServiceName: 'marketplace-service-connection'
                  fileType: 'vsix'
                  vsixFile: '$(Pipeline.Workspace)/$(artifactPath)/$(packagedTask)'
                  extensionTag: '$(devExtensionTag)'
                  extensionName: '$(extensionName) DEV'
                  extensionVersion: '$(queryDevVersion.Extension.Version)'
                  updateTasksId: true
                  extensionVisibility: 'private'
                  extensionPricing: 'free'
                  shareWith: 'datadog-ci'

          - job: E2E
            dependsOn: PublishDev
            displayName: Cross-platform end-to-end testing
            strategy:
              matrix:
                # Linux:
                #   imageName: 'ubuntu-latest'
                Windows:
                  imageName: 'windows-latest'
            pool:
              vmImage: $(imageName)
            steps:
              - task: Datadog.datadog-ci-dev.synthetics-application-testing.SyntheticsRunTests@0
                displayName: Run DEV task - apiAppKeys
                inputs:
                  authenticationType: 'apiAppKeys'
                  apiKey: '$(API_KEY)'
                  appKey: '$(APP_KEY)'
                  publicIds: '2r9-q7u-4nn'
                  # publicIds: '2r9-q7u-4nn,pwd-mwg-3p5'
                  configPath: 'ci/e2e.config.json'

              # - task: Datadog.datadog-ci-dev.synthetics-application-testing.SyntheticsRunTests@0
              #   displayName: Run DEV task - connectedService
              #   inputs:
              #     authenticationType: 'connectedService'
              #     connectedService: 'synthetics-e2e-testing-org'
              #     publicIds: |
              #       2r9-q7u-4nn
              #       pwd-mwg-3p5
              #     configPath: 'ci/e2e.config.json'

  # # Extension public release, only performed on manual runs
  # - ${{ if eq(parameters.performRelease, true) }}:
  #     - stage: Release
  #       displayName: Release
  #       dependsOn: 'Build'
  #       jobs:
  #         - job: PublishPublic
  #           displayName: Publish (public)
  #           steps:
  #             - download: current
  #               displayName: Download VSIX
  #               artifact: $(artifactPath)

  #             - task: TfxInstaller@4
  #               displayName: Install TFX CLI
  #               inputs:
  #                 version: 'v0.12.x'

  #             - task: QueryAzureDevOpsExtensionVersion@4
  #               displayName: Query existing extension version
  #               name: 'queryVersion'
  #               inputs:
  #                 connectTo: 'VsTeam'
  #                 connectedServiceName: 'marketplace-service-connection'
  #                 publisherId: '$(publisherId)'
  #                 extensionId: '$(extensionId)'
  #                 versionAction: '${{ parameters.releaseSemver }}'
  #                 setBuildNumber: 'false'

  #             - task: PublishAzureDevOpsExtension@4
  #               displayName: Publish Extension
  #               inputs:
  #                 connectTo: 'VsTeam'
  #                 connectedServiceName: 'marketplace-service-connection'
  #                 fileType: 'vsix'
  #                 vsixFile: '$(Pipeline.Workspace)/$(artifactPath)/$(packagedTask)'
  #                 updateTasksVersion: false
  #                 extensionVisibility: 'public'
  #                 extensionPricing: 'free'
  #                 extensionVersion: '$(queryVersion.Extension.Version)'
# TODO: remove this
#             - task: GitHubRelease@1
#               displayName: Create Github Release
#               inputs:
#                 gitHubConnection: 'github-service-connection-lefebvree'
#                 repositoryName: '$(Build.Repository.Name)'
#                 action: 'create'
#                 target: '$(Build.SourceVersion)'
#                 tagSource: 'userSpecifiedTag'
#                 assets: '$(Pipeline.Workspace)/$(artifactPath)/$(packagedTask)'
#                 tag: 'v$(queryVersion.Extension.Version)'
#                 title: 'v$(queryVersion.Extension.Version)'
#                 releaseNotesSource: 'inline'
#                 changeLogCompareToRelease: 'lastFullRelease'
#                 changeLogType: 'commitBased'
