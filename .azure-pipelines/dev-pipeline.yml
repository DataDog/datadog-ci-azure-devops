# Run on commits, only on `main`.
trigger:
  - main

# Require a PR to run on branches.
pr:
  branches:
    include:
      - '*'
    exclude:
      - refs/tags/* # Exclude tags

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: ci-variables
  - name: artifactPath
    value: vsix
  - name: packagedTask
    value: datadog-ci.vsix
  - name: publisherId
    value: Datadog
  - name: extensionName
    value: 'Datadog Continuous Testing'
  - name: extensionId
    value: datadog-ci
  - name: devExtensionTag
    value: -dev
  - name: contributionId
    value: synthetics-application-testing

stages:
  # Build and package .vsix extension file
  - stage: Build
    jobs:
      - job: BuildAndPackage
        displayName: Build and package
        steps:
          - task: TfxInstaller@4
            displayName: Install TFX CLI
            inputs:
              version: 'v0.15.0'

          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: '20.11.0'

          - task: Bash@3
            displayName: Compile the Synthetics task
            inputs:
              targetType: 'inline'
              script: |
                cd SyntheticsRunTestsTask
                yarn install --immutable
                yarn build
                yarn workspaces focus --production
                rm -rf .yarn/

          - task: PackageAzureDevOpsExtension@4
            displayName: Package Datadog CI extension
            name: 'packageStep'
            inputs:
              rootFolder: '$(Build.SourcesDirectory)'
              outputPath: '$(Build.ArtifactStagingDirectory)/$(packagedTask)'
              updateTasksVersion: false
              extensionVisibility: 'private'
              extensionPricing: 'free'

          - publish: '$(packageStep.Extension.OutputPath)'
            displayName: Publish VSIX artifact
            artifact: $(artifactPath)

  # Release a DEV extension. E2E tests will automatically run against it in `e2e-pipeline.yml`
  - stage: ReleaseDev
    displayName: Release DEV extension
    dependsOn: Build
    jobs:
      - job: PublishDev
        displayName: Publish (DEV)
        steps:
          - download: current
            displayName: Download VSIX artifact
            artifact: $(artifactPath)

          - task: TfxInstaller@4
            displayName: Install TFX CLI
            inputs:
              version: 'v0.15.0'

          - task: QueryAzureDevOpsExtensionVersion@4
            displayName: Query existing DEV extension version
            name: 'queryDevVersion'
            inputs:
              connectTo: 'VsTeam'
              connectedServiceName: 'marketplace-service-connection'
              publisherId: '$(publisherId)'
              extensionId: '$(extensionId)'
              extensionTag: '$(devExtensionTag)'
              versionAction: 'Patch'

          - task: PublishAzureDevOpsExtension@4
            displayName: Publish new DEV extension version
            inputs:
              connectTo: 'VsTeam'
              connectedServiceName: 'marketplace-service-connection'
              fileType: 'vsix'
              vsixFile: '$(Pipeline.Workspace)/$(artifactPath)/$(packagedTask)'
              extensionTag: '$(devExtensionTag)'
              extensionName: '$(extensionName) DEV'
              extensionVisibility: 'private'
              extensionPricing: 'free'
              shareWith: 'datadog-ci'
              extensionVersion: '$(queryDevVersion.Extension.Version)'
              updateTasksId: true # The DEV task ID is overridden to `99cf84cd-0117-58b7-b1dd-d95e5ae9baf8` (based on the `extensionTag`)
              updateTasksVersion: true # Do not require updating the task version during development
              updateTasksVersionType: patch

          # We need to wait in this job (i.e. inside the main pipeline) to make sure the extension is available before the E2E pipeline's jobs are enqueued.
          - task: Bash@3
            displayName: Wait for DEV extension availability
            inputs:
              filePath: 'ci/poll-dev-extension-availability.sh'
              arguments: |
                -s "$(SERVICE_URL)" \
                -t "$(SERVICE_TOKEN)" \
                -i "$(publisherId).$(extensionId)$(devExtensionTag).$(contributionId)" \
                -v "$(queryDevVersion.Extension.Version)"
